{"ast":null,"code":"var _jsxFileName = \"/home/boris/Projects/todo-list-dev-plan/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { TaskList } from './TaskList';\nimport { Modal } from './Modal';\nimport { CreateTaskForm } from './CreateTaskForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiUrls = {\n  todos: 'http://localhost:1337/todos'\n};\nexport const App = () => {\n  _s();\n\n  const [editingTask, setEditingTask] = useState(undefined);\n  const [taskList, setTaskList] = useState([]);\n\n  const handleCreateTask = newTaskValue => {\n    const newTask = {\n      title: newTaskValue,\n      isCompleted: false,\n      id: Date.now() // rm\n\n    };\n    axios.post(apiUrls.todos, newTask).then(response => {\n      const copyTasks = taskList.slice();\n      copyTasks.push(response.data);\n      setTaskList(copyTasks);\n      const tasks = [...taskList, newTask]; // console.log(tasks);\n      // setTaskList(tasks);\n    });\n  };\n\n  const handleRemove = id => {\n    const filtered = taskList.filter(task => task.id !== id);\n    setTaskList(filtered);\n  };\n\n  const handleCheck = id => {\n    const maped = taskList.map(task => {\n      if (task.id === id) task.isCompleted = !task.isCompleted;\n      return task;\n    });\n    setTaskList(maped);\n  };\n\n  const handleOpenEdit = (id, value = 'default') => {\n    // const finded = taskList.find((task) => task.id === id);\n    // setEditingTask(finded);\n    setEditingTask(undefined);\n    axios.put(`${apiUrls.todos}/${id}`, {\n      title: value\n    }).then(response => {\n      const copyPages = taskList.slice();\n      const findedIndex = copyPages.findIndex(page => page.id === response.data.id);\n      copyPages.splice(findedIndex, 1, response.data);\n      console.log(copyPages);\n      setTaskList(copyPages);\n    });\n  };\n\n  const handleCloseEdit = () => {\n    setEditingTask(undefined);\n  };\n\n  const handleSaveEdit = value => {\n    const maped = taskList.map(task => {\n      if (task.id === (editingTask === null || editingTask === void 0 ? void 0 : editingTask.id)) task.title = value;\n      return task;\n    });\n    setEditingTask(undefined);\n    setTaskList(maped);\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CreateTaskForm, {\n      save: handleCreateTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      tasks: taskList,\n      remove: handleRemove,\n      check: handleCheck,\n      openEdit: handleOpenEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), editingTask && /*#__PURE__*/_jsxDEV(Modal, {\n      task: editingTask,\n      close: handleCloseEdit,\n      save: handleSaveEdit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"mmTWOC4yTXZsHNzduTRieLme024=\");\n\n_c = App;\nconst StyledApp = styled.section`\n  padding: 0 20px;\n`;\n_c2 = StyledApp;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"StyledApp\");","map":{"version":3,"sources":["/home/boris/Projects/todo-list-dev-plan/src/App.tsx"],"names":["React","useState","axios","styled","TaskList","Modal","CreateTaskForm","apiUrls","todos","App","editingTask","setEditingTask","undefined","taskList","setTaskList","handleCreateTask","newTaskValue","newTask","title","isCompleted","id","Date","now","post","then","response","copyTasks","slice","push","data","tasks","handleRemove","filtered","filter","task","handleCheck","maped","map","handleOpenEdit","value","put","copyPages","findedIndex","findIndex","page","splice","console","log","handleCloseEdit","handleSaveEdit","StyledApp","section"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport { TaskList } from './TaskList';\nimport { Modal } from './Modal';\nimport { CreateTaskForm } from './CreateTaskForm';\n\nconst apiUrls = {\n  todos: 'http://localhost:1337/todos',\n};\n\nexport type TTask = {\n  title: string;\n  isCompleted: boolean;\n  id: number;\n};\n\ntype Props = { test: boolean };\n\nexport const App: React.FC<Props> = () => {\n  const [editingTask, setEditingTask] = useState<TTask | undefined>(undefined);\n  const [taskList, setTaskList] = useState([] as TTask[]);\n\n  const handleCreateTask = (newTaskValue: string) => {\n    const newTask = {\n      title: newTaskValue,\n      isCompleted: false,\n      id: Date.now(), // rm\n    };\n\n    axios.post(apiUrls.todos, newTask).then((response) => {\n      const copyTasks = taskList.slice();\n      copyTasks.push(response.data);\n      setTaskList(copyTasks);\n      const tasks = [...taskList, newTask];\n      // console.log(tasks);\n      // setTaskList(tasks);\n    });\n  };\n\n  const handleRemove = (id: number) => {\n    const filtered = taskList.filter((task) => task.id !== id);\n    setTaskList(filtered);\n  };\n\n  const handleCheck = (id: number) => {\n    const maped = taskList.map((task) => {\n      if (task.id === id) task.isCompleted = !task.isCompleted;\n      return task;\n    });\n    setTaskList(maped);\n  };\n\n  const handleOpenEdit = (id: number, value = 'default') => {\n    // const finded = taskList.find((task) => task.id === id);\n    // setEditingTask(finded);\n\n    setEditingTask(undefined);\n    axios\n      .put(`${apiUrls.todos}/${id}`, {\n        title: value,\n      })\n      .then((response) => {\n        const copyPages = taskList.slice();\n        const findedIndex = copyPages.findIndex(\n          (page) => page.id === response.data.id,\n        );\n        copyPages.splice(findedIndex, 1, response.data);\n        console.log(copyPages);\n        setTaskList(copyPages);\n      });\n  };\n\n  const handleCloseEdit = () => {\n    setEditingTask(undefined);\n  };\n\n  const handleSaveEdit = (value: string) => {\n    const maped = taskList.map((task) => {\n      if (task.id === editingTask?.id) task.title = value;\n      return task;\n    });\n    setEditingTask(undefined);\n    setTaskList(maped);\n  };\n\n  return (\n    <StyledApp>\n      <h1>Todo List</h1>\n      <CreateTaskForm save={handleCreateTask} />\n      <TaskList\n        tasks={taskList}\n        remove={handleRemove}\n        check={handleCheck}\n        openEdit={handleOpenEdit}\n      />\n      {editingTask && (\n        <Modal\n          task={editingTask}\n          close={handleCloseEdit}\n          save={handleSaveEdit}\n        />\n      )}\n    </StyledApp>\n  );\n};\n\nconst StyledApp = styled.section`\n  padding: 0 20px;\n`;\n"]},"metadata":{},"sourceType":"module"}